<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Bycgxss Blog</title><link>https://bycgxss.github.io</link><description>永远相信美好的事情即将发生</description><copyright>Bycgxss Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://bycgxss.github.io</link></image><lastBuildDate>Sat, 23 Nov 2024 10:12:28 +0000</lastBuildDate><managingEditor>Bycgxss Blog</managingEditor><ttl>60</ttl><webMaster>Bycgxss Blog</webMaster><item><title>dart-变量</title><link>https://bycgxss.github.io/post/dart--bian-liang.html</link><description>## 变量声明&#13;
### 明确类型声明&#13;
```dart&#13;
void main() {&#13;
  String s = 'John'; // 声明并给定初始值&#13;
  String s1; // 声明后赋值&#13;
  s1 = 'xxx';&#13;
}&#13;
```&#13;
### Object类型声明&#13;
```dart&#13;
void main() {&#13;
  Object a = 'xxx'; // 可以是除null以外的任意类型的值&#13;
  a = 1;&#13;
  a.xxx(); // error，只能访问Object类型定义的属性和方法&#13;
}&#13;
```&#13;
### var关键字&#13;
```dart&#13;
void main() {&#13;
  var s = 'xxx'; // 根据初始化自动推导类型&#13;
  s = 1; // error，一旦确认类型，不可更改其类型&#13;
&#13;
  var a; // 声明时未初始化，将等同于使用dynamic声明&#13;
  a = 1;&#13;
  a = 'xxx;&#13;
}&#13;
```&#13;
### dynamic关键字&#13;
```dart&#13;
void main() {&#13;
  // 可以为任意类型的值，包括null，默认值为null&#13;
  // 访问任意属性和方法都可以通过编译，可能会造成运行时异常&#13;
  dynamic a;&#13;
  a = 1;&#13;
  a = '1';&#13;
  a.xxx()&#13;
  print(a.xxx);&#13;
}&#13;
```&#13;
&#13;
---&#13;
&#13;
## 空安全&#13;
- 是什么&#13;
  - 空安全是 Dart 2.12 版本引入的一个重要特性，它帮助开发者在编译时就能够发现潜在的空引用错误，而不是在运行时才发现。</description><guid isPermaLink="true">https://bycgxss.github.io/post/dart--bian-liang.html</guid><pubDate>Tue, 19 Nov 2024 08:54:41 +0000</pubDate></item><item><title>常用sql语句</title><link>https://bycgxss.github.io/post/chang-yong-sql-yu-ju.html</link><description>## 库操作&#13;
### 增&#13;
```sql&#13;
create database `名称`;&#13;
create database if not exists `名称`;&#13;
create database if not exists `名称` character set 字符集 collate 排序规则;&#13;
```&#13;
### 删&#13;
```sql&#13;
drop database `名称`;&#13;
drop database if exists `名称`;&#13;
```&#13;
### 改&#13;
```sql&#13;
alter database `名称` character set 字符集 collate 排序规则;&#13;
```&#13;
### 查&#13;
```sql&#13;
show databases;&#13;
show tables from `库名`;&#13;
use `库名`;&#13;
select database();&#13;
show create database `库名`\G;&#13;
```&#13;
&#13;
## 表操作&#13;
### 增&#13;
```sql&#13;
create table if not exists `表名` (&#13;
  列名 列类型 [列可选约束] [comment `列可选注释`],&#13;
  列名 列类型 [列可选约束] [comment `列可选注释`]&#13;
) [表可选约束] [comment `表可选注释`];&#13;
```&#13;
### 删&#13;
```sql&#13;
drop table if exists `表名`;&#13;
```&#13;
### 改&#13;
```sql&#13;
# 修改表名&#13;
alter table `表名` rename `新表名`;&#13;
# 新增列&#13;
alter table `表名` add `列名` 列类型 [列可选约束] [first | after 列名] [comment 列可选注释];&#13;
# 删除列&#13;
alter table `表名` drop `列名`;&#13;
# 改列名&#13;
alter table `表名` change `列名` `新列名` [first | after 列名];&#13;
# 改列类型&#13;
alter table `表名` modify 列类型 [列可选约束] [first | after 列名];&#13;
```&#13;
### 查&#13;
```sql&#13;
desc `表名`;&#13;
show create table `表名`\G;&#13;
```&#13;
&#13;
## 表数据操作&#13;
### 增&#13;
```sql&#13;
insert into `表名` (列名1, 列名2, 列名3) values&#13;
  (列1值, 列2值, 列3值),&#13;
  (列1值, 列2值, 列3值),&#13;
  (列1值, 列2值, 列3值);&#13;
```&#13;
### 删&#13;
```sql&#13;
delete from `表名` where 条件; # 省略 where 条件 将会删除表中所有数据&#13;
```&#13;
### 改&#13;
```sql&#13;
update `表名` set 列名1 = 列值1, 列名2 = 列值2 where 条件; # 省略 where 条件 将会更新表中所有数据&#13;
```&#13;
### 查&#13;
```sql&#13;
# 简单查询&#13;
select * from `表名`;&#13;
select 列名1, 列名2 from `表名` [可选条件];&#13;
```。</description><guid isPermaLink="true">https://bycgxss.github.io/post/chang-yong-sql-yu-ju.html</guid><pubDate>Fri, 01 Nov 2024 02:31:31 +0000</pubDate></item></channel></rss>